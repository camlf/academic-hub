"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/json/stringify"));

var _graphqlSchema = require("./graphql-schema");

var _apolloServerExpress = require("apollo-server-express");

var _apolloServer = require("apollo-server");

var _apolloServerPluginResponseCache = _interopRequireDefault(require("apollo-server-plugin-response-cache"));

var _express = _interopRequireDefault(require("express"));

var _neo4jDriver = _interopRequireDefault(require("neo4j-driver"));

var _neo4jGraphqlJs = require("neo4j-graphql-js");

var _dotenv = _interopRequireDefault(require("dotenv"));

var _initialize = require("./initialize");

const {
  RedisCache
} = require('apollo-server-cache-redis');

const jwt_decode = require('jwt-decode');

const fetch = require('node-fetch');

const {
  URL,
  URLSearchParams
} = require('url'); // to cache GraphQL data view responses 


const Redis = require("ioredis");

const redis = new Redis("redis://:MqpCoiUSms7ZBu0GoqVFYBSeBVHBm5oxtOdYaEurzFU=@academichub.redis.cache.windows.net:6379"); // safely handles circular references

JSON.safeStringify = (obj, indent = 2) => {
  let cache = [];
  const retVal = (0, _stringify.default)(obj, (key, value) => typeof value === "object" && value !== null ? (0, _includes.default)(cache).call(cache, value) ? undefined // Duplicate reference found, discard key
  : cache.push(value) && value // Store value in our collection
  : value, indent);
  cache = null;
  return retVal;
}; // set environment variables from .env


_dotenv.default.config();

const app = (0, _express.default)();
/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const resolvers = {
  DataView: {
    interpolated: async (dataview, args, context, info) => {
      console.log(`dataview: ${JSON.safeStringify(dataview)}`);
      console.log(`args ${JSON.safeStringify(args)}`);

      if (!context || !context.headers || !context.headers.authorization) {
        throw new _apolloServer.AuthenticationError("No authorization token.");
      }

      const token = context.headers.authorization; //try {
      //  const id_token = token.replace("Bearer ", "");
      //  const decoded = jwt_decode(id_token);
      //  if (decoded.aud != "ocsapi") {
      //    throw new AuthenticationError("Bad audience");
      //  }
      //} catch (err) {
      //  throw new AuthenticationError(`You are not authorized for this resource. ${err}`);
      //}

      if (args.nextPage) {
        var url = args.nextPage;
      } else {
        var url = new URL(`https://dat-b.osisoft.com/api/v1/Tenants/65292b6c-ec16-414a-b583-ce7ae04046d4/namespaces/${args.namespace}/dataviews/${dataview.id}/data/interpolated`);
        var params = {
          startIndex: args.startIndex,
          endIndex: args.endIndex,
          interval: args.interval,
          form: 'csvh'
        };

        if (args.count) {
          params["count"] = args.count;
        }

        url.search = new URLSearchParams(params).toString();
      }

      ;
      console.log(`url: ${String(url)}`);
      var url_cache = await redis.setnx(String(url), "1", function (err, res) {
        // url_cache = res;
        console.log(`res: ${res}`);
        return res;
      });
      console.log(`url_cache: ${url_cache}, ${typeof url_cache}`);

      if (url_cache == 0) {
        console.log("--- retry ---");
        return new _apolloServerExpress.ApolloError(`  409:Conflict.  URL ${String(url)}`, 409, {
          reason: "Conflict"
        }); //return new ApolloError("Should retry", 409);
      } else {
        redis.expire(String(url), 35);
      }

      ;
      var reply = await fetch(url, {
        headers: {
          'Authorization': token
        }
      });
      console.log(`status: ${reply.status} || ${(0, _stringify.default)(reply.headers.raw())}`);

      if (reply.status == 200) {
        console.log(`headers: ${reply.headers.get('link')}`);
        var s = reply.headers.get('link');
        var links = {};
        var re = /<(\S+)>; rel=\"(\S+)\"/g;
        var m;

        do {
          m = re.exec(s);

          if (m) {
            // console.log(m[1], m[2])
            links[m[2]] = m[1];
          }
        } while (m);

        return [reply.text(), links["next"], links["first"]];
      } else {
        return new _apolloServerExpress.ApolloError(`  ${reply.status}:${reply.statusText}.  URL ${String(url)}  OperationId ${reply.headers.get("Operation-Id")}`, reply.status, {
          reason: reply.statusText,
          headers: reply.headers.raw()
        });
      }
    }
  }
};
const schema = (0, _neo4jGraphqlJs.makeAugmentedSchema)({
  typeDefs: _graphqlSchema.typeDefs,
  resolvers,
  config: {
    mutation: process.env.GRAPHQL_MUTATION || false,
    isAuthenticated: true
  } // schemaDirectives: {
  //  isAuthenticated: IsAuthenticatedDirective 
  // }
  //  config: {
  //    query: {
  //      exclude: ['RatingCount'],
  //    },
  //    mutation: {
  //      exclude: ['RatingCount'],
  //   },

});
/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */

const driver = _neo4jDriver.default.driver(process.env.NEO4J_URI || 'bolt://localhost:7687', _neo4jDriver.default.auth.basic(process.env.NEO4J_USER || 'neo4j', process.env.NEO4J_PASSWORD || 'neo4j'), {
  encrypted: process.env.NEO4J_ENCRYPTED ? 'ENCRYPTION_ON' : 'ENCRYPTION_OFF'
});
/*
 * Perform any database initialization steps such as
 * creating constraints or ensuring indexes are online
 *
 */


const init = async driver => {
  await (0, _initialize.initializeDatabase)(driver);
};
/*
 * We catch any errors that occur during initialization
 * to handle cases where we still want the API to start
 * regardless, such as running with a read only user.
 * In this case, ensure that any desired initialization steps
 * have occurred
 */


init(driver);
/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */

const server = new _apolloServerExpress.ApolloServer({
  context: ({
    req
  }) => {
    return {
      headers: req.headers,
      driver
    };
  },
  schema: schema,
  introspection: true,
  playground: true,
  plugins: [(0, _apolloServerPluginResponseCache.default)()],
  cacheControl: {
    defaultMaxAge: 60
  },
  engine: {
    apiKey: process.env.APOLLO_KEY || "none",
    graphVariant: process.env.APOLLO_GRAPH_VARIANT || "production"
  },
  cache: new RedisCache({
    host: "academichub.redis.cache.windows.net",
    port: 6379,
    family: 4,
    password: "MqpCoiUSms7ZBu0GoqVFYBSeBVHBm5oxtOdYaEurzFU="
  })
}); // Specify host, port and path for GraphQL endpoint

const port = process.env.GRAPHQL_SERVER_PORT || 4000;
const path = process.env.GRAPHQL_SERVER_PATH || '/graphql';
const host = process.env.GRAPHQL_SERVER_HOST || '0.0.0.0';
/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */

server.applyMiddleware({
  app,
  path
});
app.listen({
  host,
  port,
  path
}, () => {
  console.log(`GraphQL server ready at http://${host}:${port}${path}`);
});